package com.balaji.projecteuler.solution;

import java.util.HashMap;
import java.util.Map;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... Let us list the
 * factors of the first seven triangle numbers: 1: 1 3: 1,3 6: 1,2,3,6 10:
 * 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28: 1,2,4,7,14,28 We can see that 28 is
 * the first triangle number to have over five divisors. What is the value of
 * the first triangle number to have over five hundred divisors?
 * 
 * @author Balaji Rayakota
 */
public class Problem_12_HighlyDivisibleTriangularNumber {
	/**
	 * Solution = 76576500.
	 * 
	 * @param args
	 *           The String array with command line arguments.
	 */
	public static void main(final String[] args) {
		int index = 1;
		while (true) {
			final long number = index * (index + 1) / 2;
			final int divisors = numberOfDivisors(number);
			if (divisors > 500) {
				System.out.println(index + " - " + number + " - " + divisors);
				break;
			}
			System.out.println(index + " - " + number + " - " + divisors);
			index++;
		}
	}

	/**
	 * Returns number of divisors of a number.
	 * 
	 * @param number
	 *           The number (must be positive).
	 * @return a positive integer.
	 */
	public static int numberOfDivisors(final long number) {
		if (number < 1) {
			throw new IllegalArgumentException("cannot find number of divisors for negative numbers");
		}

		final Map<Integer, Integer> primePowers = new HashMap<>();

		long tempNumber = number;
		while (tempNumber != 1) {
			int index = 2;
			while (tempNumber % index != 0) {
				index++;
			}

			final int count = primePowers.get(index) == null ? 1 : (primePowers.get(index) + 1);
			primePowers.put(index, count);
			tempNumber /= index;
		}

		int product = 1;
		for (final Integer power : primePowers.values()) {
			product *= power + 1;
		}
		return product;
	}
}
